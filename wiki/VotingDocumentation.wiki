#summary Documentation for our implementation of the Australian Voting problem

= Introduction =

HanPing Ting's and Jackie Tsay's implementation of the Australian Voting problem.

= Details =

== Algorithm ==

We use the following algorithm for each case where n is the input and v1-v4 are the 4 outputs.

1. Make a list of all the candidates.

2. For each ballot, add the ballot to the candidate that is listed as the first choice.

3. Check if there is a decisive winner (a candidate with more than 50% of the votes.

4. Eliminate all candidates with the least number of votes and reassign the eliminated candidates' ballots to the next candidate listed on the ballot who is still in the running.

5. Repeat 3 and 4 until there is a decisive winner or there is a tie (eliminated all remaining candidates).

=== Step 1 ===

We made a list of Candidate objects that contained information like the candidate's name, list of ballots, and number of ballots.

=== Step 2 ===

For each ballot, we made a Ballot object that had the list of choices and which choice was currently being counted. For instance, for a ballot "1 3 2", once candidate 1 was knocked out, the ballot's current candidate would be candidate 3.

=== Step 3 ===

By looping through the list of Candidates, we can easily find the list of candidates with the least number of votes and determine if any candidate has a number of votes greater than twice the total number of ballots, which would mean he has a majority of votes.

=== Step 4 ===

Using the list from Step 3, we take the eliminated candidates out of the running by reassigning their ballots to the next candidate on the each ballot that is still running. 

=== Step 5 ===

We repeat the previous two steps until we have either found a decisive winner or the list of candidates eliminated is the same length of the list of candidates still running. The latter case indicates that all candidates still running had the same number of votes, which means a tie has occurred. 